Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

 

Example 1:

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
Example 2:

Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.


 solution:

 python:

 class Solution(object):
    def longestOnes(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        start = 0

        for end in range(len(nums)):
            if nums[end] == 0:
                k -= 1
            
            if k < 0:
                if nums[start] == 0:
                    k += 1
                
                start += 1
        
        return end - start + 1

  ### הסבר:
  ראשית נרוץ על איברי המערך ונשתמש ב"יתרה שלנו" בנוסף נבדוק האם השתמשנו יותר מידי ביתרה-אם כן נסגור חלק של החלון.
בעצם בפתרון אנחנו מרחיבים ומקטינים את גודל החלון שיקבע כמה אחדות אנו מצליחים להכניס יחד-לבסוף נחזיר את גודל החלון.

java:

class Solution {
    public int longestOnes(int[] nums, int k) {
        int left = 0, n = nums.length, right;

        for (right = 0; right < n; right++) {
            if (nums[right] == 0)
                k -= 1;
            
            if (k < 0) {
                if (nums[left] == 0)
                    k += 1;
                
                left += 1;
            }
        }

        return right - left;
    }
}
