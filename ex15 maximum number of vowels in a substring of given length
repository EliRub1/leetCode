Given a string s and an integer k, return the maximum number of vowel letters in any substring of s with length k.

Vowel letters in English are 'a', 'e', 'i', 'o', and 'u'.

 

Example 1:

Input: s = "abciiidef", k = 3
Output: 3
Explanation: The substring "iii" contains 3 vowel letters.
Example 2:

Input: s = "aeiou", k = 2
Output: 2
Explanation: Any substring of length 2 contains 2 vowels.
Example 3:

Input: s = "leetcode", k = 3
Output: 2
Explanation: "lee", "eet" and "ode" contain 2 vowels.


 solution:

 python:

 class Solution(object):
    def maxVowels(self, s, k):
        """
        :type s: str
        :type k: int
        :rtype: int
        """
        vowels="aeiouAEIOU"
        maxv=0

        for i in range(k):
            if s[i] in vowels:
                maxv+=1

        firstmax=maxv

        for i in range(k,len(s)):
            if s[i] in vowels and s[i-k] not in vowels:
                maxv+=1
            elif s[i] not in vowels and s[i-k] in vowels:
                maxv-=1
            firstmax=max(maxv,firstmax)

        return firstmax

## הסבר:
קודם נבדוק את קיי האיברים הראשונים ונשמור במשתנה,לאחר מכן נעבור על כל שאר איברי המחרוזת ו נעדכן בהתאם מונה,לבסוף נחזיר את התוצאה המירבית.

java:(NM)

class Solution {
    public int maxVowels(String s, int k) {
        int vowel = 0;
        for(int i =0; i< k; i++)
            if(isVowel(s.charAt(i))) vowel++;
        int max = vowel;
        for(int i = k; i < s.length(); i++){
            if(isVowel(s.charAt(i))) vowel++;
            if(isVowel(s.charAt(i-k))) vowel--;
            max = Math.max(max, vowel);
        }
        return max;
    }
    private boolean isVowel(char c){
        if((c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')) return true;
        return false;
    }
}

