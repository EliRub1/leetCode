Given a binary array nums, you should delete one element from it.

Return the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray.

 

Example 1:

Input: nums = [1,1,0,1]
Output: 3
Explanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.
Example 2:

Input: nums = [0,1,1,1,0,1,1,0,1]
Output: 5
Explanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].
Example 3:

Input: nums = [1,1,1]
Output: 2
Explanation: You must delete one element.

solution:

python:

class Solution(object):
    def longestSubarray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        l, max1, zero = 0, 0, 0
        for r in range(len(nums)):
            if nums[r] == 0:
                zero += 1
            if zero > 1:
                if nums[l] == 0:
                    zero -= 1
                l += 1
            max1 = max(max1, r - l)
        return max1

        הסבר: נספור את מספר האפסים,אם נגיע לאפס שני נתחיל להקטין את החלון עד שנמחק אותו כדי להשאר רק אם אפס אחד-ונחזיר את גודל החלון.

java:
class Solution {
    public int longestSubarray(int[] nums) {
        int l = 0, max1 = 0, zero = 0;
        for (int r = 0; r < nums.length; r++) {
            if (nums[r] == 0) zero++;
            if (zero > 1) {
                if (nums[l] == 0) zero--;
                l++;
            }
            max1 = Math.max(max1, r - l);
        }
        return max1;
    }
}

        
